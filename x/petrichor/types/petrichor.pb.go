// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: petrichor/petrichor.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// key: denom value: PetrichorAsset
type PetrichorAsset struct {
	// Denom of the asset. It could either be a native token or an IBC token
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	// The reward weight specifies the ratio of rewards that will be given to each petrichor asset
	// It does not need to sum to 1. rate = weight / total_weight
	// Native asset is always assumed to have a weight of 1.s
	RewardWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reward_weight,json=rewardWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_weight"`
	// A positive take rate is used for liquid staking derivatives. It defines an rate that is applied per take_rate_interval
	// that will be redirected to the distribution rewards pool
	TakeRate             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=take_rate,json=takeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"take_rate"`
	TotalTokens          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_tokens,json=totalTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_tokens"`
	TotalValidatorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=total_validator_shares,json=totalValidatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_validator_shares"`
	RewardStartTime      time.Time                              `protobuf:"bytes,6,opt,name=reward_start_time,json=rewardStartTime,proto3,stdtime" json:"reward_start_time"`
	RewardChangeRate     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=reward_change_rate,json=rewardChangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_change_rate"`
	RewardChangeInterval time.Duration                          `protobuf:"bytes,8,opt,name=reward_change_interval,json=rewardChangeInterval,proto3,stdduration" json:"reward_change_interval"`
	LastRewardChangeTime time.Time                              `protobuf:"bytes,9,opt,name=last_reward_change_time,json=lastRewardChangeTime,proto3,stdtime" json:"last_reward_change_time"`
}

func (m *PetrichorAsset) Reset()         { *m = PetrichorAsset{} }
func (m *PetrichorAsset) String() string { return proto.CompactTextString(m) }
func (*PetrichorAsset) ProtoMessage()    {}
func (*PetrichorAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_baabf92e941f4fa4, []int{0}
}
func (m *PetrichorAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PetrichorAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PetrichorAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PetrichorAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PetrichorAsset.Merge(m, src)
}
func (m *PetrichorAsset) XXX_Size() int {
	return m.Size()
}
func (m *PetrichorAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_PetrichorAsset.DiscardUnknown(m)
}

var xxx_messageInfo_PetrichorAsset proto.InternalMessageInfo

type RewardWeightChangeSnapshot struct {
	PrevRewardWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=prev_reward_weight,json=prevRewardWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"prev_reward_weight"`
	RewardHistories  []RewardHistory                        `protobuf:"bytes,2,rep,name=reward_histories,json=rewardHistories,proto3" json:"reward_histories"`
}

func (m *RewardWeightChangeSnapshot) Reset()         { *m = RewardWeightChangeSnapshot{} }
func (m *RewardWeightChangeSnapshot) String() string { return proto.CompactTextString(m) }
func (*RewardWeightChangeSnapshot) ProtoMessage()    {}
func (*RewardWeightChangeSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_baabf92e941f4fa4, []int{1}
}
func (m *RewardWeightChangeSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardWeightChangeSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardWeightChangeSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardWeightChangeSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardWeightChangeSnapshot.Merge(m, src)
}
func (m *RewardWeightChangeSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *RewardWeightChangeSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardWeightChangeSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_RewardWeightChangeSnapshot proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PetrichorAsset)(nil), "petrichor.petrichor.PetrichorAsset")
	proto.RegisterType((*RewardWeightChangeSnapshot)(nil), "petrichor.petrichor.RewardWeightChangeSnapshot")
}

func init() { proto.RegisterFile("petrichor/petrichor.proto", fileDescriptor_baabf92e941f4fa4) }

var fileDescriptor_baabf92e941f4fa4 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0xed, 0xfe, 0x7d, 0xe9, 0xb4, 0x1f, 0x14, 0x13, 0x15, 0x37, 0x0b, 0xbb, 0xca, 0xa2,
	0xea, 0xa6, 0xb6, 0xd4, 0xee, 0x2a, 0x36, 0x84, 0x2e, 0x1a, 0x21, 0xa4, 0xca, 0xa9, 0x40, 0xfc,
	0x48, 0xd6, 0x24, 0x1e, 0x6c, 0x2b, 0xb6, 0xc7, 0x9a, 0x39, 0x49, 0xc8, 0x1d, 0xb0, 0xac, 0xc4,
	0x86, 0x65, 0x2f, 0x82, 0x8b, 0xe8, 0xb2, 0x62, 0x05, 0x2c, 0x02, 0x4a, 0x36, 0xac, 0xb9, 0x02,
	0x34, 0x33, 0x36, 0x75, 0x80, 0x4d, 0xb3, 0xf2, 0xf1, 0x9c, 0x33, 0xcf, 0x79, 0xe7, 0x3d, 0xa3,
	0x41, 0x3b, 0x39, 0x01, 0x16, 0xf7, 0x22, 0xca, 0xdc, 0xdf, 0x91, 0x93, 0x33, 0x0a, 0xd4, 0xb8,
	0x5f, 0x59, 0x28, 0xa3, 0x46, 0x3d, 0xa4, 0x21, 0x95, 0x79, 0x57, 0x44, 0xaa, 0xb4, 0xb1, 0xd3,
	0xa3, 0x3c, 0xa5, 0xdc, 0x57, 0x09, 0xf5, 0x53, 0xa4, 0xb6, 0x2b, 0x0d, 0x30, 0xc3, 0x69, 0xb9,
	0x6e, 0x85, 0x94, 0x86, 0x09, 0x71, 0xe5, 0x5f, 0x77, 0xf0, 0xc6, 0x0d, 0x06, 0x0c, 0x43, 0x4c,
	0xb3, 0x22, 0x6f, 0xff, 0x99, 0x87, 0x38, 0x25, 0x1c, 0x70, 0x9a, 0xab, 0x82, 0xe6, 0xfb, 0x35,
	0x74, 0xe7, 0xac, 0x64, 0x3f, 0xe2, 0x9c, 0x80, 0xb1, 0x87, 0x56, 0x03, 0x92, 0xd1, 0xd4, 0xd4,
	0x77, 0xf5, 0xfd, 0xf5, 0xd6, 0xd6, 0xcf, 0x89, 0xbd, 0x39, 0xc6, 0x69, 0x72, 0xdc, 0x94, 0xcb,
	0x4d, 0x4f, 0xa5, 0x8d, 0x0e, 0xfa, 0x9f, 0x91, 0x11, 0x66, 0x81, 0x3f, 0x22, 0x71, 0x18, 0x81,
	0xb9, 0x24, 0xeb, 0x9d, 0xab, 0x89, 0xad, 0x7d, 0x9d, 0xd8, 0x7b, 0x61, 0x0c, 0xd1, 0xa0, 0xeb,
	0xf4, 0x68, 0x5a, 0x9c, 0xa5, 0xf8, 0x1c, 0xf0, 0xa0, 0xef, 0xc2, 0x38, 0x27, 0xdc, 0x39, 0x21,
	0x3d, 0x6f, 0x53, 0x41, 0x9e, 0x4b, 0x86, 0xf1, 0x04, 0xad, 0x03, 0xee, 0x13, 0x9f, 0x61, 0x20,
	0xe6, 0xf2, 0x42, 0xc0, 0x9a, 0x00, 0x78, 0x18, 0x88, 0xe1, 0xa3, 0x4d, 0xa0, 0x80, 0x13, 0x1f,
	0x68, 0x9f, 0x64, 0xdc, 0x5c, 0x91, 0xbc, 0x87, 0xb7, 0xe0, 0xb5, 0x33, 0xf8, 0xf4, 0xf1, 0x00,
	0x15, 0xb3, 0x68, 0x67, 0xe0, 0x6d, 0x48, 0xe2, 0xb9, 0x04, 0x1a, 0x01, 0xda, 0x56, 0x0d, 0x86,
	0x38, 0x89, 0x03, 0x0c, 0x94, 0xf9, 0x3c, 0xc2, 0x8c, 0x70, 0x73, 0x75, 0x21, 0xe9, 0x75, 0x49,
	0x7b, 0x56, 0xc2, 0x3a, 0x92, 0x65, 0x9c, 0xa1, 0x7b, 0x85, 0xd1, 0x1c, 0x30, 0x03, 0x5f, 0xcc,
	0xd0, 0x5c, 0xdb, 0xd5, 0xf7, 0x37, 0x0e, 0x1b, 0x8e, 0x1a, 0xb0, 0x53, 0x0e, 0xd8, 0x39, 0x2f,
	0x07, 0xdc, 0xaa, 0x89, 0xe6, 0x17, 0xdf, 0x6c, 0xdd, 0xbb, 0xab, 0xb6, 0x77, 0xc4, 0x6e, 0x91,
	0x37, 0x5e, 0x23, 0xa3, 0x20, 0xf6, 0x22, 0x9c, 0x85, 0x85, 0xdd, 0xff, 0x2d, 0xa4, 0x79, 0x4b,
	0x91, 0x1e, 0x4b, 0x90, 0xb4, 0xfd, 0x05, 0xda, 0x9e, 0xa7, 0xc7, 0x19, 0x10, 0x36, 0xc4, 0x89,
	0x59, 0x93, 0xa2, 0x77, 0xfe, 0x12, 0x7d, 0x52, 0xdc, 0x5a, 0xa5, 0xf9, 0x83, 0xd0, 0x5c, 0xaf,
	0x62, 0xdb, 0x05, 0xc0, 0x78, 0x85, 0x1e, 0x24, 0x98, 0x83, 0x3f, 0xcf, 0x97, 0x86, 0xac, 0xdf,
	0xc2, 0x90, 0xba, 0x80, 0x78, 0x95, 0x06, 0xa2, 0xe8, 0xb8, 0xf6, 0xee, 0xd2, 0xd6, 0x7e, 0x5c,
	0xda, 0x5a, 0xf3, 0x8b, 0x8e, 0x1a, 0x5e, 0xe5, 0x5a, 0xaa, 0xa2, 0x4e, 0x86, 0x73, 0x1e, 0x51,
	0x10, 0xf6, 0xe5, 0x8c, 0x0c, 0xfd, 0xf9, 0xeb, 0xaf, 0x2f, 0x66, 0x9f, 0x20, 0x55, 0x7b, 0x19,
	0x1d, 0x54, 0x58, 0xea, 0x47, 0x31, 0x07, 0xca, 0x62, 0xc2, 0xcd, 0xa5, 0xdd, 0xe5, 0xfd, 0x8d,
	0xc3, 0xa6, 0xf3, 0x8f, 0xc7, 0xc4, 0x51, 0x9b, 0x4f, 0x65, 0xed, 0xb8, 0xb5, 0x22, 0xfa, 0x97,
	0x13, 0x3f, 0x2d, 0x01, 0x37, 0x67, 0x6b, 0x3d, 0xbd, 0x9a, 0x5a, 0xfa, 0xf5, 0xd4, 0xd2, 0xbf,
	0x4f, 0x2d, 0xfd, 0x62, 0x66, 0x69, 0xd7, 0x33, 0x4b, 0xfb, 0x3c, 0xb3, 0xb4, 0x97, 0x47, 0x15,
	0xc9, 0x12, 0x9f, 0x11, 0x18, 0x51, 0xd6, 0xbf, 0x79, 0xd3, 0xdc, 0xb7, 0x95, 0x58, 0x9e, 0xa1,
	0xbb, 0x26, 0x8d, 0x3e, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0x86, 0x2e, 0x6e, 0xbe, 0x03, 0x05,
	0x00, 0x00,
}

func (m *PetrichorAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetrichorAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PetrichorAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastRewardChangeTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastRewardChangeTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPetrichor(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RewardChangeInterval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.RewardChangeInterval):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPetrichor(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	{
		size := m.RewardChangeRate.Size()
		i -= size
		if _, err := m.RewardChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPetrichor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.RewardStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.RewardStartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintPetrichor(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalValidatorShares.Size()
		i -= size
		if _, err := m.TotalValidatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPetrichor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalTokens.Size()
		i -= size
		if _, err := m.TotalTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPetrichor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TakeRate.Size()
		i -= size
		if _, err := m.TakeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPetrichor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.RewardWeight.Size()
		i -= size
		if _, err := m.RewardWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPetrichor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintPetrichor(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardWeightChangeSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardWeightChangeSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardWeightChangeSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardHistories) > 0 {
		for iNdEx := len(m.RewardHistories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardHistories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPetrichor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.PrevRewardWeight.Size()
		i -= size
		if _, err := m.PrevRewardWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPetrichor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPetrichor(dAtA []byte, offset int, v uint64) int {
	offset -= sovPetrichor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PetrichorAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovPetrichor(uint64(l))
	}
	l = m.RewardWeight.Size()
	n += 1 + l + sovPetrichor(uint64(l))
	l = m.TakeRate.Size()
	n += 1 + l + sovPetrichor(uint64(l))
	l = m.TotalTokens.Size()
	n += 1 + l + sovPetrichor(uint64(l))
	l = m.TotalValidatorShares.Size()
	n += 1 + l + sovPetrichor(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.RewardStartTime)
	n += 1 + l + sovPetrichor(uint64(l))
	l = m.RewardChangeRate.Size()
	n += 1 + l + sovPetrichor(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RewardChangeInterval)
	n += 1 + l + sovPetrichor(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastRewardChangeTime)
	n += 1 + l + sovPetrichor(uint64(l))
	return n
}

func (m *RewardWeightChangeSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrevRewardWeight.Size()
	n += 1 + l + sovPetrichor(uint64(l))
	if len(m.RewardHistories) > 0 {
		for _, e := range m.RewardHistories {
			l = e.Size()
			n += 1 + l + sovPetrichor(uint64(l))
		}
	}
	return n
}

func sovPetrichor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPetrichor(x uint64) (n int) {
	return sovPetrichor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PetrichorAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPetrichor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetrichorAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetrichorAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalValidatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.RewardStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardChangeInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RewardChangeInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardChangeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastRewardChangeTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPetrichor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPetrichor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardWeightChangeSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPetrichor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardWeightChangeSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardWeightChangeSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRewardWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevRewardWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPetrichor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPetrichor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardHistories = append(m.RewardHistories, RewardHistory{})
			if err := m.RewardHistories[len(m.RewardHistories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPetrichor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPetrichor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPetrichor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPetrichor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPetrichor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPetrichor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPetrichor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPetrichor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPetrichor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPetrichor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPetrichor = fmt.Errorf("proto: unexpected end of group")
)
