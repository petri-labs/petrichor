// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: petrichor/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Petrichors
type QueryPetrichorsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorsRequest) Reset()         { *m = QueryPetrichorsRequest{} }
func (m *QueryPetrichorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorsRequest) ProtoMessage()    {}
func (*QueryPetrichorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{2}
}
func (m *QueryPetrichorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorsRequest.Merge(m, src)
}
func (m *QueryPetrichorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorsRequest proto.InternalMessageInfo

func (m *QueryPetrichorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPetrichorsResponse struct {
	Petrichors []PetrichorAsset    `protobuf:"bytes,1,rep,name=petrichors,proto3" json:"petrichors"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorsResponse) Reset()         { *m = QueryPetrichorsResponse{} }
func (m *QueryPetrichorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorsResponse) ProtoMessage()    {}
func (*QueryPetrichorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{3}
}
func (m *QueryPetrichorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorsResponse.Merge(m, src)
}
func (m *QueryPetrichorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorsResponse proto.InternalMessageInfo

func (m *QueryPetrichorsResponse) GetPetrichors() []PetrichorAsset {
	if m != nil {
		return m.Petrichors
	}
	return nil
}

func (m *QueryPetrichorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Petrichor
type QueryPetrichorRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryPetrichorRequest) Reset()         { *m = QueryPetrichorRequest{} }
func (m *QueryPetrichorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorRequest) ProtoMessage()    {}
func (*QueryPetrichorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{4}
}
func (m *QueryPetrichorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorRequest.Merge(m, src)
}
func (m *QueryPetrichorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorRequest proto.InternalMessageInfo

func (m *QueryPetrichorRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryPetrichorResponse struct {
	Petrichor *PetrichorAsset `protobuf:"bytes,1,opt,name=petrichor,proto3" json:"petrichor,omitempty"`
}

func (m *QueryPetrichorResponse) Reset()         { *m = QueryPetrichorResponse{} }
func (m *QueryPetrichorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorResponse) ProtoMessage()    {}
func (*QueryPetrichorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{5}
}
func (m *QueryPetrichorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorResponse.Merge(m, src)
}
func (m *QueryPetrichorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorResponse proto.InternalMessageInfo

func (m *QueryPetrichorResponse) GetPetrichor() *PetrichorAsset {
	if m != nil {
		return m.Petrichor
	}
	return nil
}

type QueryIBCPetrichorRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryIBCPetrichorRequest) Reset()         { *m = QueryIBCPetrichorRequest{} }
func (m *QueryIBCPetrichorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIBCPetrichorRequest) ProtoMessage()    {}
func (*QueryIBCPetrichorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{6}
}
func (m *QueryIBCPetrichorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCPetrichorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCPetrichorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCPetrichorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCPetrichorRequest.Merge(m, src)
}
func (m *QueryIBCPetrichorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCPetrichorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCPetrichorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCPetrichorRequest proto.InternalMessageInfo

func (m *QueryIBCPetrichorRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type QueryPetrichorValidatorRequest struct {
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryPetrichorValidatorRequest) Reset()         { *m = QueryPetrichorValidatorRequest{} }
func (m *QueryPetrichorValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorValidatorRequest) ProtoMessage()    {}
func (*QueryPetrichorValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{7}
}
func (m *QueryPetrichorValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorValidatorRequest.Merge(m, src)
}
func (m *QueryPetrichorValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorValidatorRequest proto.InternalMessageInfo

type QueryAllPetrichorValidatorsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPetrichorValidatorsRequest) Reset()         { *m = QueryAllPetrichorValidatorsRequest{} }
func (m *QueryAllPetrichorValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPetrichorValidatorsRequest) ProtoMessage()    {}
func (*QueryAllPetrichorValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{8}
}
func (m *QueryAllPetrichorValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPetrichorValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPetrichorValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPetrichorValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPetrichorValidatorsRequest.Merge(m, src)
}
func (m *QueryAllPetrichorValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPetrichorValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPetrichorValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPetrichorValidatorsRequest proto.InternalMessageInfo

type QueryAllPetrichorsDelegationsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPetrichorsDelegationsRequest) Reset()         { *m = QueryAllPetrichorsDelegationsRequest{} }
func (m *QueryAllPetrichorsDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPetrichorsDelegationsRequest) ProtoMessage()    {}
func (*QueryAllPetrichorsDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{9}
}
func (m *QueryAllPetrichorsDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPetrichorsDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPetrichorsDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPetrichorsDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPetrichorsDelegationsRequest.Merge(m, src)
}
func (m *QueryAllPetrichorsDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPetrichorsDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPetrichorsDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPetrichorsDelegationsRequest proto.InternalMessageInfo

// PetrichorsDelegation
type QueryPetrichorsDelegationsRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorsDelegationsRequest) Reset()         { *m = QueryPetrichorsDelegationsRequest{} }
func (m *QueryPetrichorsDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorsDelegationsRequest) ProtoMessage()    {}
func (*QueryPetrichorsDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{10}
}
func (m *QueryPetrichorsDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorsDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorsDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorsDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorsDelegationsRequest.Merge(m, src)
}
func (m *QueryPetrichorsDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorsDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorsDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorsDelegationsRequest proto.InternalMessageInfo

// PetrichorsDelegationByValidator
type QueryPetrichorsDelegationByValidatorRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorsDelegationByValidatorRequest) Reset() {
	*m = QueryPetrichorsDelegationByValidatorRequest{}
}
func (m *QueryPetrichorsDelegationByValidatorRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPetrichorsDelegationByValidatorRequest) ProtoMessage() {}
func (*QueryPetrichorsDelegationByValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{11}
}
func (m *QueryPetrichorsDelegationByValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorsDelegationByValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorsDelegationByValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorsDelegationByValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorsDelegationByValidatorRequest.Merge(m, src)
}
func (m *QueryPetrichorsDelegationByValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorsDelegationByValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorsDelegationByValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorsDelegationByValidatorRequest proto.InternalMessageInfo

// DelegationResponse is equivalent to Delegation except that it contains a
// balance in addition to shares which is more suitable for client responses.
type DelegationResponse struct {
	Delegation Delegation `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
	Balance    types.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance"`
}

func (m *DelegationResponse) Reset()         { *m = DelegationResponse{} }
func (m *DelegationResponse) String() string { return proto.CompactTextString(m) }
func (*DelegationResponse) ProtoMessage()    {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{12}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

func (m *DelegationResponse) GetDelegation() Delegation {
	if m != nil {
		return m.Delegation
	}
	return Delegation{}
}

func (m *DelegationResponse) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

type QueryPetrichorsDelegationsResponse struct {
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	Pagination  *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorsDelegationsResponse) Reset()         { *m = QueryPetrichorsDelegationsResponse{} }
func (m *QueryPetrichorsDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorsDelegationsResponse) ProtoMessage()    {}
func (*QueryPetrichorsDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{13}
}
func (m *QueryPetrichorsDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorsDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorsDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorsDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorsDelegationsResponse.Merge(m, src)
}
func (m *QueryPetrichorsDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorsDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorsDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorsDelegationsResponse proto.InternalMessageInfo

func (m *QueryPetrichorsDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryPetrichorsDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// PetrichorDelegation
type QueryPetrichorDelegationRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Denom         string             `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorDelegationRequest) Reset()         { *m = QueryPetrichorDelegationRequest{} }
func (m *QueryPetrichorDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorDelegationRequest) ProtoMessage()    {}
func (*QueryPetrichorDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{14}
}
func (m *QueryPetrichorDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorDelegationRequest.Merge(m, src)
}
func (m *QueryPetrichorDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorDelegationRequest proto.InternalMessageInfo

type QueryIBCPetrichorDelegationRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Hash          string             `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIBCPetrichorDelegationRequest) Reset()         { *m = QueryIBCPetrichorDelegationRequest{} }
func (m *QueryIBCPetrichorDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIBCPetrichorDelegationRequest) ProtoMessage()    {}
func (*QueryIBCPetrichorDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{15}
}
func (m *QueryIBCPetrichorDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCPetrichorDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCPetrichorDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCPetrichorDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCPetrichorDelegationRequest.Merge(m, src)
}
func (m *QueryIBCPetrichorDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCPetrichorDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCPetrichorDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCPetrichorDelegationRequest proto.InternalMessageInfo

type QueryPetrichorDelegationResponse struct {
	Delegation DelegationResponse `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
}

func (m *QueryPetrichorDelegationResponse) Reset()         { *m = QueryPetrichorDelegationResponse{} }
func (m *QueryPetrichorDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorDelegationResponse) ProtoMessage()    {}
func (*QueryPetrichorDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{16}
}
func (m *QueryPetrichorDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorDelegationResponse.Merge(m, src)
}
func (m *QueryPetrichorDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorDelegationResponse proto.InternalMessageInfo

func (m *QueryPetrichorDelegationResponse) GetDelegation() DelegationResponse {
	if m != nil {
		return m.Delegation
	}
	return DelegationResponse{}
}

// PetrichorDelegation
type QueryPetrichorDelegationRewardsRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Denom         string             `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorDelegationRewardsRequest) Reset() {
	*m = QueryPetrichorDelegationRewardsRequest{}
}
func (m *QueryPetrichorDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryPetrichorDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{17}
}
func (m *QueryPetrichorDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryPetrichorDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorDelegationRewardsRequest proto.InternalMessageInfo

type QueryIBCPetrichorDelegationRewardsRequest struct {
	DelegatorAddr string             `protobuf:"bytes,1,opt,name=delegator_addr,json=delegatorAddr,proto3" json:"delegator_addr,omitempty"`
	ValidatorAddr string             `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Hash          string             `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIBCPetrichorDelegationRewardsRequest) Reset() {
	*m = QueryIBCPetrichorDelegationRewardsRequest{}
}
func (m *QueryIBCPetrichorDelegationRewardsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIBCPetrichorDelegationRewardsRequest) ProtoMessage() {}
func (*QueryIBCPetrichorDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{18}
}
func (m *QueryIBCPetrichorDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCPetrichorDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCPetrichorDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCPetrichorDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCPetrichorDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryIBCPetrichorDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCPetrichorDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCPetrichorDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCPetrichorDelegationRewardsRequest proto.InternalMessageInfo

type QueryPetrichorDelegationRewardsResponse struct {
	Rewards []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,rep,name=rewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"rewards"`
}

func (m *QueryPetrichorDelegationRewardsResponse) Reset() {
	*m = QueryPetrichorDelegationRewardsResponse{}
}
func (m *QueryPetrichorDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorDelegationRewardsResponse) ProtoMessage()    {}
func (*QueryPetrichorDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{19}
}
func (m *QueryPetrichorDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorDelegationRewardsResponse.Merge(m, src)
}
func (m *QueryPetrichorDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorDelegationRewardsResponse proto.InternalMessageInfo

type QueryPetrichorValidatorResponse struct {
	ValidatorAddr         string          `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	TotalDelegationShares []types.DecCoin `protobuf:"bytes,2,rep,name=total_delegation_shares,json=totalDelegationShares,proto3" json:"total_delegation_shares"`
	ValidatorShares       []types.DecCoin `protobuf:"bytes,3,rep,name=validator_shares,json=validatorShares,proto3" json:"validator_shares"`
	TotalStaked           []types.DecCoin `protobuf:"bytes,4,rep,name=total_staked,json=totalStaked,proto3" json:"total_staked"`
}

func (m *QueryPetrichorValidatorResponse) Reset()         { *m = QueryPetrichorValidatorResponse{} }
func (m *QueryPetrichorValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorValidatorResponse) ProtoMessage()    {}
func (*QueryPetrichorValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{20}
}
func (m *QueryPetrichorValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorValidatorResponse.Merge(m, src)
}
func (m *QueryPetrichorValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorValidatorResponse proto.InternalMessageInfo

type QueryPetrichorValidatorsResponse struct {
	Validators []QueryPetrichorValidatorResponse `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
	Pagination *query.PageResponse               `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPetrichorValidatorsResponse) Reset()         { *m = QueryPetrichorValidatorsResponse{} }
func (m *QueryPetrichorValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPetrichorValidatorsResponse) ProtoMessage()    {}
func (*QueryPetrichorValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a940d30fee11e7d5, []int{21}
}
func (m *QueryPetrichorValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPetrichorValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPetrichorValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPetrichorValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPetrichorValidatorsResponse.Merge(m, src)
}
func (m *QueryPetrichorValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPetrichorValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPetrichorValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPetrichorValidatorsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "petrichor.petrichor.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "petrichor.petrichor.QueryParamsResponse")
	proto.RegisterType((*QueryPetrichorsRequest)(nil), "petrichor.petrichor.QueryPetrichorsRequest")
	proto.RegisterType((*QueryPetrichorsResponse)(nil), "petrichor.petrichor.QueryPetrichorsResponse")
	proto.RegisterType((*QueryPetrichorRequest)(nil), "petrichor.petrichor.QueryPetrichorRequest")
	proto.RegisterType((*QueryPetrichorResponse)(nil), "petrichor.petrichor.QueryPetrichorResponse")
	proto.RegisterType((*QueryIBCPetrichorRequest)(nil), "petrichor.petrichor.QueryIBCPetrichorRequest")
	proto.RegisterType((*QueryPetrichorValidatorRequest)(nil), "petrichor.petrichor.QueryPetrichorValidatorRequest")
	proto.RegisterType((*QueryAllPetrichorValidatorsRequest)(nil), "petrichor.petrichor.QueryAllPetrichorValidatorsRequest")
	proto.RegisterType((*QueryAllPetrichorsDelegationsRequest)(nil), "petrichor.petrichor.QueryAllPetrichorsDelegationsRequest")
	proto.RegisterType((*QueryPetrichorsDelegationsRequest)(nil), "petrichor.petrichor.QueryPetrichorsDelegationsRequest")
	proto.RegisterType((*QueryPetrichorsDelegationByValidatorRequest)(nil), "petrichor.petrichor.QueryPetrichorsDelegationByValidatorRequest")
	proto.RegisterType((*DelegationResponse)(nil), "petrichor.petrichor.DelegationResponse")
	proto.RegisterType((*QueryPetrichorsDelegationsResponse)(nil), "petrichor.petrichor.QueryPetrichorsDelegationsResponse")
	proto.RegisterType((*QueryPetrichorDelegationRequest)(nil), "petrichor.petrichor.QueryPetrichorDelegationRequest")
	proto.RegisterType((*QueryIBCPetrichorDelegationRequest)(nil), "petrichor.petrichor.QueryIBCPetrichorDelegationRequest")
	proto.RegisterType((*QueryPetrichorDelegationResponse)(nil), "petrichor.petrichor.QueryPetrichorDelegationResponse")
	proto.RegisterType((*QueryPetrichorDelegationRewardsRequest)(nil), "petrichor.petrichor.QueryPetrichorDelegationRewardsRequest")
	proto.RegisterType((*QueryIBCPetrichorDelegationRewardsRequest)(nil), "petrichor.petrichor.QueryIBCPetrichorDelegationRewardsRequest")
	proto.RegisterType((*QueryPetrichorDelegationRewardsResponse)(nil), "petrichor.petrichor.QueryPetrichorDelegationRewardsResponse")
	proto.RegisterType((*QueryPetrichorValidatorResponse)(nil), "petrichor.petrichor.QueryPetrichorValidatorResponse")
	proto.RegisterType((*QueryPetrichorValidatorsResponse)(nil), "petrichor.petrichor.QueryPetrichorValidatorsResponse")
}

func init() { proto.RegisterFile("petrichor/query.proto", fileDescriptor_a940d30fee11e7d5) }

var fileDescriptor_a940d30fee11e7d5 = []byte{
	// 1287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x98, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x3d, 0x4e, 0x9a, 0x92, 0x97, 0x52, 0xe0, 0xe5, 0x47, 0x1d, 0x27, 0xb5, 0xd3, 0xa5,
	0x69, 0x42, 0x4b, 0x76, 0x69, 0x42, 0x5b, 0xa5, 0x20, 0x20, 0x49, 0xd3, 0x10, 0x20, 0x34, 0x75,
	0x25, 0x0e, 0xe1, 0x10, 0xd6, 0xde, 0x95, 0x63, 0xc5, 0xf1, 0x3a, 0xbb, 0x9b, 0xb4, 0x51, 0x64,
	0x09, 0xf5, 0x02, 0xc7, 0x4a, 0x9c, 0x90, 0x38, 0xf4, 0x1f, 0x80, 0x1b, 0x1c, 0xe1, 0xc2, 0xa1,
	0x17, 0xa4, 0xa2, 0x1e, 0xa8, 0x10, 0x0a, 0x28, 0x29, 0x12, 0x17, 0xfe, 0x07, 0xe4, 0xd9, 0xd9,
	0x9d, 0xb1, 0x77, 0x6d, 0xaf, 0x1d, 0x1b, 0xa9, 0xa7, 0x6e, 0xc7, 0xf3, 0xde, 0x7c, 0xbe, 0x6f,
	0xde, 0xbc, 0x79, 0x13, 0x18, 0x2c, 0xea, 0xb6, 0x99, 0xcb, 0x6c, 0x18, 0xa6, 0xb2, 0xbd, 0xa3,
	0x9b, 0x7b, 0x72, 0xd1, 0x34, 0x6c, 0x03, 0xfb, 0xbd, 0x61, 0xd9, 0xfb, 0x8a, 0x0f, 0x64, 0x8d,
	0xac, 0x41, 0x7f, 0x57, 0xca, 0x5f, 0xce, 0xd4, 0xf8, 0x68, 0xd6, 0x30, 0xb2, 0x79, 0x5d, 0x51,
	0x8b, 0x39, 0x45, 0x2d, 0x14, 0x0c, 0x5b, 0xb5, 0x73, 0x46, 0xc1, 0x62, 0xbf, 0x5e, 0xcc, 0x18,
	0xd6, 0x96, 0x61, 0x29, 0x69, 0xd5, 0xd2, 0x9d, 0x15, 0x94, 0xdd, 0xcb, 0x69, 0xdd, 0x56, 0x2f,
	0x2b, 0x45, 0x35, 0x9b, 0x2b, 0xd0, 0xc9, 0x6c, 0xee, 0x10, 0x67, 0x29, 0xaa, 0xa6, 0xba, 0xe5,
	0xfa, 0x18, 0x16, 0xc6, 0x39, 0x16, 0xfd, 0x29, 0x21, 0xba, 0x77, 0x1d, 0x67, 0x8c, 0x9c, 0xeb,
	0x72, 0x84, 0x9b, 0x6a, 0x7a, 0x5e, 0xcf, 0x8a, 0x6c, 0xd2, 0x00, 0xe0, 0xed, 0x32, 0xd1, 0x2a,
	0x5d, 0x2c, 0xa5, 0x6f, 0xef, 0xe8, 0x96, 0x2d, 0xad, 0x42, 0x7f, 0xc5, 0xa8, 0x55, 0x34, 0x0a,
	0x96, 0x8e, 0xb3, 0xd0, 0xe3, 0x40, 0xc5, 0xc8, 0x18, 0x99, 0xec, 0x9b, 0x1e, 0x91, 0x03, 0x42,
	0x24, 0x3b, 0x46, 0xf3, 0xdd, 0x8f, 0x0e, 0x92, 0x91, 0x14, 0x33, 0x90, 0x3e, 0x83, 0x21, 0xc7,
	0xa3, 0x3b, 0xcd, 0x5d, 0x0b, 0x6f, 0x02, 0xf0, 0x28, 0x30, 0xc7, 0x17, 0x64, 0x47, 0x93, 0x5c,
	0xd6, 0x24, 0x3b, 0x9b, 0xc2, 0x94, 0xc9, 0xab, 0x6a, 0x56, 0x67, 0xb6, 0x29, 0xc1, 0x52, 0xfa,
	0x96, 0xc0, 0x19, 0xdf, 0x12, 0x0c, 0x7c, 0x19, 0xc0, 0xe3, 0x2b, 0xc3, 0x77, 0x4d, 0xf6, 0x4d,
	0xbf, 0x1a, 0x0c, 0xef, 0x7e, 0xcd, 0x59, 0x96, 0x6e, 0x33, 0x11, 0x82, 0x31, 0x2e, 0x55, 0xe0,
	0x46, 0x29, 0xee, 0x44, 0x43, 0x5c, 0x87, 0xa3, 0x82, 0x77, 0x0a, 0x06, 0x2b, 0x71, 0xdd, 0x80,
	0x0c, 0xc0, 0x09, 0x4d, 0x2f, 0x18, 0x5b, 0x34, 0x16, 0xbd, 0x29, 0xe7, 0x3f, 0xd2, 0xa7, 0xd5,
	0x01, 0xf4, 0xc4, 0xcd, 0x41, 0xaf, 0xc7, 0xc7, 0xe2, 0x17, 0x46, 0x5b, 0x8a, 0x5b, 0x49, 0x32,
	0xc4, 0xa8, 0xf3, 0xe5, 0xf9, 0x05, 0x1f, 0x0e, 0x42, 0xf7, 0x86, 0x6a, 0x6d, 0x30, 0x1a, 0xfa,
	0x2d, 0xdd, 0x86, 0x44, 0x25, 0xcc, 0x27, 0x6a, 0x3e, 0xa7, 0xa9, 0x36, 0xb7, 0x1a, 0x87, 0xd3,
	0xbb, 0xee, 0xd8, 0xba, 0xaa, 0x69, 0x26, 0xb3, 0x7f, 0xd1, 0x1b, 0x9d, 0xd3, 0x34, 0xf3, 0xfa,
	0x0b, 0x5f, 0x3e, 0x4c, 0x46, 0xfe, 0x79, 0x98, 0x8c, 0x48, 0xbb, 0x20, 0x51, 0x97, 0x73, 0xf9,
	0xbc, 0xdf, 0x6b, 0xbb, 0x93, 0x45, 0x58, 0xf7, 0x1e, 0x9c, 0xf7, 0xad, 0x6b, 0xdd, 0xe0, 0xe7,
	0xa4, 0x73, 0x2b, 0x7f, 0x43, 0xe0, 0x5c, 0x55, 0xc2, 0x06, 0xac, 0x3b, 0x0e, 0xa7, 0xd9, 0xa9,
	0xad, 0x0a, 0xa4, 0x37, 0x5a, 0x0e, 0x64, 0x15, 0x5e, 0xb4, 0x0d, 0x78, 0xbf, 0x10, 0xb8, 0x54,
	0x13, 0x6f, 0x7e, 0x2f, 0x68, 0xc7, 0xc3, 0x80, 0xfa, 0x13, 0x23, 0x1a, 0x90, 0x18, 0x55, 0x7a,
	0xba, 0xda, 0x13, 0x6e, 0xe4, 0x02, 0xbc, 0xd3, 0xb3, 0x08, 0xc0, 0xab, 0x22, 0xdb, 0xd7, 0x64,
	0xe0, 0xf1, 0x11, 0xd4, 0xb3, 0xb2, 0xc0, 0x0d, 0x71, 0x16, 0x4e, 0xa6, 0xd5, 0xbc, 0x5a, 0xc8,
	0xe8, 0x2c, 0xf8, 0xc3, 0x15, 0xb0, 0x2e, 0xe6, 0x82, 0x91, 0x73, 0xad, 0xdd, 0xf9, 0xd7, 0xbb,
	0x29, 0xde, 0x8f, 0x84, 0x1d, 0x80, 0x1a, 0xd9, 0xc0, 0x70, 0x6f, 0x41, 0x9f, 0x50, 0xc4, 0x59,
	0x29, 0x9b, 0x68, 0xc0, 0xeb, 0x5a, 0xb3, 0x95, 0x45, 0x0f, 0xed, 0xab, 0x67, 0xbf, 0x11, 0x48,
	0x56, 0x0a, 0x10, 0x01, 0x3a, 0x91, 0x23, 0x5e, 0xa1, 0xec, 0x12, 0x0a, 0x65, 0x55, 0xe6, 0x74,
	0xb7, 0x21, 0x73, 0x9e, 0xba, 0x5b, 0x23, 0x96, 0xc7, 0x4e, 0x8b, 0x73, 0xcb, 0x6e, 0x17, 0x2f,
	0xbb, 0x1d, 0x90, 0xb6, 0x0d, 0x63, 0xb5, 0xf7, 0x8c, 0xa5, 0xdc, 0x4a, 0xc0, 0x09, 0x69, 0x32,
	0xe3, 0x04, 0x07, 0xd2, 0x01, 0x81, 0x0b, 0xb5, 0xd7, 0xbc, 0xab, 0x9a, 0x9a, 0xf5, 0x7c, 0xa7,
	0xcb, 0x9f, 0x04, 0x5e, 0xab, 0x9b, 0x2e, 0x1d, 0xd4, 0xf8, 0xff, 0x64, 0xcd, 0xd7, 0x04, 0x26,
	0x1a, 0x6e, 0x21, 0xcb, 0x1e, 0x0d, 0x4e, 0x9a, 0xce, 0x10, 0x2b, 0x56, 0x75, 0x0a, 0xa3, 0x52,
	0x4e, 0x96, 0xdf, 0x0f, 0x92, 0x13, 0xd9, 0x9c, 0xbd, 0xb1, 0x93, 0x96, 0x33, 0xc6, 0x96, 0xc2,
	0x9a, 0x5b, 0xe7, 0x9f, 0x29, 0x4b, 0xdb, 0x54, 0xec, 0xbd, 0xa2, 0x6e, 0x51, 0x83, 0x94, 0xeb,
	0x5a, 0x60, 0xfb, 0x39, 0x5a, 0x5d, 0x86, 0x84, 0x9b, 0x8a, 0x31, 0x85, 0x6b, 0x4e, 0x70, 0x0d,
	0xce, 0xd8, 0x86, 0xad, 0xe6, 0xd7, 0x79, 0xf6, 0xae, 0x5b, 0x1b, 0xaa, 0xa9, 0x5b, 0xb1, 0x28,
	0x95, 0x32, 0x1a, 0x28, 0xe5, 0x86, 0x9e, 0x11, 0xca, 0xfc, 0x20, 0x75, 0xc1, 0xe3, 0x73, 0x87,
	0x3a, 0xc0, 0x15, 0x78, 0x99, 0x23, 0x30, 0xa7, 0x5d, 0xa1, 0x9d, 0xbe, 0xe4, 0xd9, 0x32, 0x77,
	0x8b, 0x70, 0xca, 0x41, 0xb5, 0x6c, 0x75, 0x53, 0xd7, 0x62, 0xdd, 0xa1, 0x5d, 0xf5, 0x51, 0xbb,
	0x3b, 0xd4, 0x4c, 0x08, 0xe3, 0xaf, 0xa4, 0xba, 0x32, 0x88, 0xcd, 0x18, 0x8b, 0xe3, 0x1a, 0x80,
	0x07, 0xe2, 0x6e, 0xef, 0x9b, 0x81, 0x95, 0xa1, 0xc1, 0x8e, 0xb8, 0x65, 0x82, 0x7b, 0x6b, 0xdb,
	0xbd, 0xc4, 0x35, 0x4d, 0x7f, 0xde, 0x0f, 0x27, 0x28, 0x08, 0x96, 0xa0, 0xc7, 0x79, 0xa5, 0xe0,
	0x44, 0x1d, 0x5c, 0xf1, 0x49, 0x14, 0x9f, 0x6c, 0x3c, 0xd1, 0x59, 0x5c, 0x1a, 0xbb, 0xff, 0xe4,
	0xd9, 0x57, 0xd1, 0x38, 0xc6, 0x14, 0x5b, 0x37, 0x4d, 0x95, 0xbf, 0xd7, 0x2c, 0xf6, 0xa4, 0xc3,
	0xfb, 0x04, 0x80, 0x5f, 0xf3, 0x78, 0x29, 0x44, 0xc8, 0x3c, 0x8e, 0xd7, 0xc3, 0x4d, 0x66, 0x2c,
	0xc3, 0x94, 0xa5, 0x1f, 0x5f, 0xf1, 0xb1, 0xe0, 0x03, 0x02, 0xa7, 0xc4, 0x0a, 0x85, 0x53, 0xb5,
	0x3d, 0x07, 0xbc, 0x0b, 0xe2, 0x61, 0xa8, 0x3d, 0x8e, 0xf3, 0x94, 0x23, 0x81, 0xa3, 0xfe, 0x98,
	0xe4, 0xd2, 0x19, 0x65, 0xbf, 0x5c, 0xa8, 0x4a, 0xf8, 0x3d, 0x81, 0x58, 0xad, 0x3e, 0x1c, 0x67,
	0x6b, 0xaf, 0xd7, 0xa0, 0x77, 0x8f, 0x5f, 0x0b, 0x13, 0xb3, 0x80, 0x6e, 0x4b, 0x1a, 0xa7, 0xd8,
	0x49, 0x3c, 0xeb, 0xc7, 0x16, 0x7b, 0xa8, 0x1f, 0x08, 0xa0, 0x3f, 0xb9, 0x71, 0xa6, 0xb9, 0xa3,
	0xe0, 0xb0, 0xb6, 0x74, 0x7e, 0xa4, 0x2b, 0x14, 0x54, 0xc1, 0x29, 0x3f, 0x28, 0x3f, 0x53, 0xca,
	0x7e, 0x65, 0xd5, 0x2b, 0xe1, 0x77, 0x04, 0x86, 0x82, 0x1f, 0x5c, 0x78, 0x2d, 0x5c, 0xb8, 0x7d,
	0x4f, 0xb4, 0xf8, 0x95, 0x66, 0x04, 0x58, 0x61, 0x32, 0x44, 0xa8, 0x0a, 0x3f, 0x11, 0x18, 0x08,
	0xda, 0x32, 0xbc, 0xda, 0xf4, 0x16, 0x1f, 0x33, 0x35, 0xae, 0x52, 0xde, 0x37, 0x50, 0xae, 0x9b,
	0x1a, 0xca, 0x7e, 0xe5, 0xe5, 0x5e, 0xc2, 0xbf, 0x09, 0x24, 0x1b, 0xbc, 0xa8, 0xf0, 0xbd, 0xe6,
	0xa0, 0xfc, 0x8f, 0xb1, 0xd6, 0x65, 0x2d, 0x51, 0x59, 0x73, 0xf8, 0x6e, 0x73, 0xb2, 0xfc, 0xa9,
	0xf5, 0x84, 0x40, 0x7f, 0x40, 0x7b, 0x80, 0x61, 0xf2, 0xdb, 0xd7, 0x5b, 0x87, 0x4a, 0x2a, 0x7f,
	0xf7, 0x29, 0xdd, 0xa2, 0x6a, 0x96, 0x71, 0xe9, 0x98, 0x6a, 0xca, 0x33, 0x0a, 0xc6, 0x56, 0x09,
	0xff, 0x20, 0x30, 0x14, 0xdc, 0xd6, 0xd5, 0x3b, 0x30, 0x75, 0xdf, 0x0d, 0xad, 0x6a, 0x4b, 0x51,
	0x6d, 0x1f, 0xe1, 0x07, 0xc7, 0xd5, 0x26, 0x14, 0xe0, 0x67, 0x04, 0xe2, 0xb5, 0x7b, 0x3a, 0x7c,
	0xab, 0x49, 0x52, 0xb1, 0xd1, 0x8d, 0xbf, 0xdd, 0x9a, 0x31, 0x53, 0xfb, 0x21, 0x55, 0xbb, 0x88,
	0x0b, 0x7e, 0xb5, 0xac, 0x07, 0x6c, 0x62, 0x17, 0xff, 0x25, 0x70, 0xb6, 0x6e, 0x73, 0x8e, 0xef,
	0x34, 0xbf, 0x99, 0x6d, 0x14, 0xfb, 0x31, 0x15, 0xfb, 0x3e, 0xde, 0x3c, 0x8e, 0x58, 0x61, 0x5b,
	0xbf, 0x20, 0xd0, 0xcb, 0xef, 0xf9, 0x8b, 0xa1, 0x2e, 0xee, 0x16, 0x2e, 0xf9, 0x73, 0x14, 0x7b,
	0x04, 0x87, 0xfd, 0xd8, 0x2c, 0xf2, 0xf3, 0x2b, 0x8f, 0x0e, 0x13, 0xe4, 0xf1, 0x61, 0x82, 0xfc,
	0x75, 0x98, 0x20, 0x0f, 0x8e, 0x12, 0x91, 0xc7, 0x47, 0x89, 0xc8, 0xd3, 0xa3, 0x44, 0x64, 0x6d,
	0x46, 0xe8, 0xf9, 0xa9, 0x61, 0x41, 0xb7, 0xef, 0x1a, 0xe6, 0x26, 0xf7, 0xa2, 0xdc, 0x13, 0xbe,
	0xe9, 0x23, 0x20, 0xdd, 0x43, 0xff, 0x88, 0x3d, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d,
	0x7d, 0xd2, 0x23, 0xc2, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Query paginated petrichors
	Petrichors(ctx context.Context, in *QueryPetrichorsRequest, opts ...grpc.CallOption) (*QueryPetrichorsResponse, error)
	// Query a specific petrichor by ibc hash
	IBCPetrichor(ctx context.Context, in *QueryIBCPetrichorRequest, opts ...grpc.CallOption) (*QueryPetrichorResponse, error)
	// Query all paginated petrichor delegations
	AllPetrichorsDelegations(ctx context.Context, in *QueryAllPetrichorsDelegationsRequest, opts ...grpc.CallOption) (*QueryPetrichorsDelegationsResponse, error)
	// Query petrichor validator
	PetrichorValidator(ctx context.Context, in *QueryPetrichorValidatorRequest, opts ...grpc.CallOption) (*QueryPetrichorValidatorResponse, error)
	// Query all paginated petrichor validators
	AllPetrichorValidators(ctx context.Context, in *QueryAllPetrichorValidatorsRequest, opts ...grpc.CallOption) (*QueryPetrichorValidatorsResponse, error)
	// Query all paginated petrichor delegations for a delegator addr
	PetrichorsDelegation(ctx context.Context, in *QueryPetrichorsDelegationsRequest, opts ...grpc.CallOption) (*QueryPetrichorsDelegationsResponse, error)
	// Query all paginated petrichor delegations for a delegator addr and validator_addr
	PetrichorsDelegationByValidator(ctx context.Context, in *QueryPetrichorsDelegationByValidatorRequest, opts ...grpc.CallOption) (*QueryPetrichorsDelegationsResponse, error)
	// Query a delegation to an petrichor by delegator addr, validator_addr and denom
	PetrichorDelegation(ctx context.Context, in *QueryPetrichorDelegationRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationResponse, error)
	// Query a delegation to an petrichor by delegator addr, validator_addr and denom
	IBCPetrichorDelegation(ctx context.Context, in *QueryIBCPetrichorDelegationRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	PetrichorDelegationRewards(ctx context.Context, in *QueryPetrichorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationRewardsResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	IBCPetrichorDelegationRewards(ctx context.Context, in *QueryIBCPetrichorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationRewardsResponse, error)
	// Query a specific petrichor by denom
	Petrichor(ctx context.Context, in *QueryPetrichorRequest, opts ...grpc.CallOption) (*QueryPetrichorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Petrichors(ctx context.Context, in *QueryPetrichorsRequest, opts ...grpc.CallOption) (*QueryPetrichorsResponse, error) {
	out := new(QueryPetrichorsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/Petrichors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCPetrichor(ctx context.Context, in *QueryIBCPetrichorRequest, opts ...grpc.CallOption) (*QueryPetrichorResponse, error) {
	out := new(QueryPetrichorResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/IBCPetrichor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPetrichorsDelegations(ctx context.Context, in *QueryAllPetrichorsDelegationsRequest, opts ...grpc.CallOption) (*QueryPetrichorsDelegationsResponse, error) {
	out := new(QueryPetrichorsDelegationsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/AllPetrichorsDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PetrichorValidator(ctx context.Context, in *QueryPetrichorValidatorRequest, opts ...grpc.CallOption) (*QueryPetrichorValidatorResponse, error) {
	out := new(QueryPetrichorValidatorResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/PetrichorValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPetrichorValidators(ctx context.Context, in *QueryAllPetrichorValidatorsRequest, opts ...grpc.CallOption) (*QueryPetrichorValidatorsResponse, error) {
	out := new(QueryPetrichorValidatorsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/AllPetrichorValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PetrichorsDelegation(ctx context.Context, in *QueryPetrichorsDelegationsRequest, opts ...grpc.CallOption) (*QueryPetrichorsDelegationsResponse, error) {
	out := new(QueryPetrichorsDelegationsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/PetrichorsDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PetrichorsDelegationByValidator(ctx context.Context, in *QueryPetrichorsDelegationByValidatorRequest, opts ...grpc.CallOption) (*QueryPetrichorsDelegationsResponse, error) {
	out := new(QueryPetrichorsDelegationsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/PetrichorsDelegationByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PetrichorDelegation(ctx context.Context, in *QueryPetrichorDelegationRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationResponse, error) {
	out := new(QueryPetrichorDelegationResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/PetrichorDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCPetrichorDelegation(ctx context.Context, in *QueryIBCPetrichorDelegationRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationResponse, error) {
	out := new(QueryPetrichorDelegationResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/IBCPetrichorDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PetrichorDelegationRewards(ctx context.Context, in *QueryPetrichorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationRewardsResponse, error) {
	out := new(QueryPetrichorDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/PetrichorDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCPetrichorDelegationRewards(ctx context.Context, in *QueryIBCPetrichorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPetrichorDelegationRewardsResponse, error) {
	out := new(QueryPetrichorDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/IBCPetrichorDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Petrichor(ctx context.Context, in *QueryPetrichorRequest, opts ...grpc.CallOption) (*QueryPetrichorResponse, error) {
	out := new(QueryPetrichorResponse)
	err := c.cc.Invoke(ctx, "/petrichor.petrichor.Query/Petrichor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Query paginated petrichors
	Petrichors(context.Context, *QueryPetrichorsRequest) (*QueryPetrichorsResponse, error)
	// Query a specific petrichor by ibc hash
	IBCPetrichor(context.Context, *QueryIBCPetrichorRequest) (*QueryPetrichorResponse, error)
	// Query all paginated petrichor delegations
	AllPetrichorsDelegations(context.Context, *QueryAllPetrichorsDelegationsRequest) (*QueryPetrichorsDelegationsResponse, error)
	// Query petrichor validator
	PetrichorValidator(context.Context, *QueryPetrichorValidatorRequest) (*QueryPetrichorValidatorResponse, error)
	// Query all paginated petrichor validators
	AllPetrichorValidators(context.Context, *QueryAllPetrichorValidatorsRequest) (*QueryPetrichorValidatorsResponse, error)
	// Query all paginated petrichor delegations for a delegator addr
	PetrichorsDelegation(context.Context, *QueryPetrichorsDelegationsRequest) (*QueryPetrichorsDelegationsResponse, error)
	// Query all paginated petrichor delegations for a delegator addr and validator_addr
	PetrichorsDelegationByValidator(context.Context, *QueryPetrichorsDelegationByValidatorRequest) (*QueryPetrichorsDelegationsResponse, error)
	// Query a delegation to an petrichor by delegator addr, validator_addr and denom
	PetrichorDelegation(context.Context, *QueryPetrichorDelegationRequest) (*QueryPetrichorDelegationResponse, error)
	// Query a delegation to an petrichor by delegator addr, validator_addr and denom
	IBCPetrichorDelegation(context.Context, *QueryIBCPetrichorDelegationRequest) (*QueryPetrichorDelegationResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	PetrichorDelegationRewards(context.Context, *QueryPetrichorDelegationRewardsRequest) (*QueryPetrichorDelegationRewardsResponse, error)
	// Query for rewards by delegator addr, validator_addr and denom
	IBCPetrichorDelegationRewards(context.Context, *QueryIBCPetrichorDelegationRewardsRequest) (*QueryPetrichorDelegationRewardsResponse, error)
	// Query a specific petrichor by denom
	Petrichor(context.Context, *QueryPetrichorRequest) (*QueryPetrichorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Petrichors(ctx context.Context, req *QueryPetrichorsRequest) (*QueryPetrichorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Petrichors not implemented")
}
func (*UnimplementedQueryServer) IBCPetrichor(ctx context.Context, req *QueryIBCPetrichorRequest) (*QueryPetrichorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCPetrichor not implemented")
}
func (*UnimplementedQueryServer) AllPetrichorsDelegations(ctx context.Context, req *QueryAllPetrichorsDelegationsRequest) (*QueryPetrichorsDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPetrichorsDelegations not implemented")
}
func (*UnimplementedQueryServer) PetrichorValidator(ctx context.Context, req *QueryPetrichorValidatorRequest) (*QueryPetrichorValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PetrichorValidator not implemented")
}
func (*UnimplementedQueryServer) AllPetrichorValidators(ctx context.Context, req *QueryAllPetrichorValidatorsRequest) (*QueryPetrichorValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPetrichorValidators not implemented")
}
func (*UnimplementedQueryServer) PetrichorsDelegation(ctx context.Context, req *QueryPetrichorsDelegationsRequest) (*QueryPetrichorsDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PetrichorsDelegation not implemented")
}
func (*UnimplementedQueryServer) PetrichorsDelegationByValidator(ctx context.Context, req *QueryPetrichorsDelegationByValidatorRequest) (*QueryPetrichorsDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PetrichorsDelegationByValidator not implemented")
}
func (*UnimplementedQueryServer) PetrichorDelegation(ctx context.Context, req *QueryPetrichorDelegationRequest) (*QueryPetrichorDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PetrichorDelegation not implemented")
}
func (*UnimplementedQueryServer) IBCPetrichorDelegation(ctx context.Context, req *QueryIBCPetrichorDelegationRequest) (*QueryPetrichorDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCPetrichorDelegation not implemented")
}
func (*UnimplementedQueryServer) PetrichorDelegationRewards(ctx context.Context, req *QueryPetrichorDelegationRewardsRequest) (*QueryPetrichorDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PetrichorDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) IBCPetrichorDelegationRewards(ctx context.Context, req *QueryIBCPetrichorDelegationRewardsRequest) (*QueryPetrichorDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCPetrichorDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) Petrichor(ctx context.Context, req *QueryPetrichorRequest) (*QueryPetrichorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Petrichor not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Petrichors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPetrichorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Petrichors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/Petrichors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Petrichors(ctx, req.(*QueryPetrichorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCPetrichor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCPetrichorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCPetrichor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/IBCPetrichor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCPetrichor(ctx, req.(*QueryIBCPetrichorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPetrichorsDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPetrichorsDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPetrichorsDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/AllPetrichorsDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPetrichorsDelegations(ctx, req.(*QueryAllPetrichorsDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PetrichorValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPetrichorValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PetrichorValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/PetrichorValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PetrichorValidator(ctx, req.(*QueryPetrichorValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPetrichorValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPetrichorValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPetrichorValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/AllPetrichorValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPetrichorValidators(ctx, req.(*QueryAllPetrichorValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PetrichorsDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPetrichorsDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PetrichorsDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/PetrichorsDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PetrichorsDelegation(ctx, req.(*QueryPetrichorsDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PetrichorsDelegationByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPetrichorsDelegationByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PetrichorsDelegationByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/PetrichorsDelegationByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PetrichorsDelegationByValidator(ctx, req.(*QueryPetrichorsDelegationByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PetrichorDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPetrichorDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PetrichorDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/PetrichorDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PetrichorDelegation(ctx, req.(*QueryPetrichorDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCPetrichorDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCPetrichorDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCPetrichorDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/IBCPetrichorDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCPetrichorDelegation(ctx, req.(*QueryIBCPetrichorDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PetrichorDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPetrichorDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PetrichorDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/PetrichorDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PetrichorDelegationRewards(ctx, req.(*QueryPetrichorDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCPetrichorDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCPetrichorDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCPetrichorDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/IBCPetrichorDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCPetrichorDelegationRewards(ctx, req.(*QueryIBCPetrichorDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Petrichor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPetrichorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Petrichor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petrichor.petrichor.Query/Petrichor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Petrichor(ctx, req.(*QueryPetrichorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "petrichor.petrichor.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Petrichors",
			Handler:    _Query_Petrichors_Handler,
		},
		{
			MethodName: "IBCPetrichor",
			Handler:    _Query_IBCPetrichor_Handler,
		},
		{
			MethodName: "AllPetrichorsDelegations",
			Handler:    _Query_AllPetrichorsDelegations_Handler,
		},
		{
			MethodName: "PetrichorValidator",
			Handler:    _Query_PetrichorValidator_Handler,
		},
		{
			MethodName: "AllPetrichorValidators",
			Handler:    _Query_AllPetrichorValidators_Handler,
		},
		{
			MethodName: "PetrichorsDelegation",
			Handler:    _Query_PetrichorsDelegation_Handler,
		},
		{
			MethodName: "PetrichorsDelegationByValidator",
			Handler:    _Query_PetrichorsDelegationByValidator_Handler,
		},
		{
			MethodName: "PetrichorDelegation",
			Handler:    _Query_PetrichorDelegation_Handler,
		},
		{
			MethodName: "IBCPetrichorDelegation",
			Handler:    _Query_IBCPetrichorDelegation_Handler,
		},
		{
			MethodName: "PetrichorDelegationRewards",
			Handler:    _Query_PetrichorDelegationRewards_Handler,
		},
		{
			MethodName: "IBCPetrichorDelegationRewards",
			Handler:    _Query_IBCPetrichorDelegationRewards_Handler,
		},
		{
			MethodName: "Petrichor",
			Handler:    _Query_Petrichor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petrichor/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Petrichors) > 0 {
		for iNdEx := len(m.Petrichors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Petrichors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Petrichor != nil {
		{
			size, err := m.Petrichor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCPetrichorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCPetrichorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCPetrichorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPetrichorValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPetrichorValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPetrichorValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPetrichorsDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPetrichorsDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPetrichorsDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorsDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorsDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorsDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorsDelegationByValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorsDelegationByValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorsDelegationByValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorsDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorsDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorsDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCPetrichorDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCPetrichorDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCPetrichorDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCPetrichorDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCPetrichorDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCPetrichorDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Rewards[iNdEx].Size()
				i -= size
				if _, err := m.Rewards[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalStaked) > 0 {
		for iNdEx := len(m.TotalStaked) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalStaked[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ValidatorShares) > 0 {
		for iNdEx := len(m.ValidatorShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TotalDelegationShares) > 0 {
		for iNdEx := len(m.TotalDelegationShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDelegationShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPetrichorValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPetrichorValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPetrichorValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPetrichorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Petrichors) > 0 {
		for _, e := range m.Petrichors {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Petrichor != nil {
		l = m.Petrichor.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCPetrichorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPetrichorValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPetrichorsDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorsDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorsDelegationByValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPetrichorsDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCPetrichorDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPetrichorDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIBCPetrichorDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPetrichorDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPetrichorValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.TotalDelegationShares) > 0 {
		for _, e := range m.TotalDelegationShares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ValidatorShares) > 0 {
		for _, e := range m.ValidatorShares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalStaked) > 0 {
		for _, e := range m.TotalStaked {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPetrichorValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Petrichors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Petrichors = append(m.Petrichors, PetrichorAsset{})
			if err := m.Petrichors[len(m.Petrichors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Petrichor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Petrichor == nil {
				m.Petrichor = &PetrichorAsset{}
			}
			if err := m.Petrichor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCPetrichorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCPetrichorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCPetrichorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPetrichorValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPetrichorValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPetrichorValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPetrichorsDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPetrichorsDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPetrichorsDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorsDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorsDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorsDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorsDelegationByValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorsDelegationByValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorsDelegationByValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorsDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorsDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorsDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCPetrichorDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCPetrichorDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCPetrichorDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCPetrichorDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCPetrichorDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCPetrichorDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegationShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDelegationShares = append(m.TotalDelegationShares, types.DecCoin{})
			if err := m.TotalDelegationShares[len(m.TotalDelegationShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorShares = append(m.ValidatorShares, types.DecCoin{})
			if err := m.ValidatorShares[len(m.ValidatorShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStaked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStaked = append(m.TotalStaked, types.DecCoin{})
			if err := m.TotalStaked[len(m.TotalStaked)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPetrichorValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPetrichorValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPetrichorValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, QueryPetrichorValidatorResponse{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
